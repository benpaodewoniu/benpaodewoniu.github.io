<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>犀牛的博客</title>
  
  <subtitle>姑苏城外一茅屋，万树梅花月满天</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://benpaodewoniu.github.io/"/>
  <updated>2024-07-04T03:36:12.835Z</updated>
  <id>http://benpaodewoniu.github.io/</id>
  
  <author>
    <name>犀牛</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nft | 如何获取 NFT 成交信息</title>
    <link href="http://benpaodewoniu.github.io/2024/07/04/nft2/"/>
    <id>http://benpaodewoniu.github.io/2024/07/04/nft2/</id>
    <published>2024-07-04T03:22:39.000Z</published>
    <updated>2024-07-04T03:36:12.835Z</updated>
    
    <content type="html"><![CDATA[<p>虽然只是说 <code>NFT</code> 成交，但是，其他情况也可以沿用这些平台。</p><ul><li><code>OKX</code></li><li><code>OKlink</code></li><li><code>element</code></li><li>其他平台</li></ul><a id="more"></a><h2 id="其他平台"><a href="#其他平台" class="headerlink" title="其他平台"></a>其他平台</h2><p>其他平台可以放弃了，又贵又难用。</p><h2 id="OKlink"><a href="#OKlink" class="headerlink" title="OKlink"></a>OKlink</h2><ul><li><a href="https://www.oklink.com/docs/zh/#nft-data">OKlink</a></li></ul><p>这个平台目前有些局限性。就是，想要获取 <code>NFT</code> 的信息需要传递 <code>token id</code>，不能查询全量。</p><h2 id="OKX"><a href="#OKX" class="headerlink" title="OKX"></a>OKX</h2><ul><li><a href="https://www.okx.com/zh-hans/web3/build/docs/waas/marketplace-query-listing">OKX</a></li></ul><p>很良心的平台，免费。但是，对于成交情况返回的信息是不全的，但是挂单啥的，挺好用的。</p><h2 id="element"><a href="#element" class="headerlink" title="element"></a>element</h2><ul><li><a href="https://element.readme.io/reference/api-overview">element</a></li></ul><p>同样很良心的平台，价格合适，选择 <code>50</code> 美金的套餐足够了。</p><p>关于成交使用</p><ul><li><a href="https://element.readme.io/reference/get-asset-event-list">get-asset-event-list</a></li></ul><p>有一点需要说明，如果存在批量扫单的情况，即一个区块有多个 NFT 成交，那么，这个区块的里面的单子是无序的，但是，这个不影响。</p><ul><li><a href="https://arbiscan.io/tx/0x48fddfe462a72b3a0c6d7e4f7ed27a6e65e13f6541fd8703c49979a071404a8d">0x48fddfe462a72b3a0c6d7e4f7ed27a6e65e13f6541fd8703c49979a071404a8d</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然只是说 &lt;code&gt;NFT&lt;/code&gt; 成交，但是，其他情况也可以沿用这些平台。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OKX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OKlink&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;element&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;其他平台&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="区块链" scheme="http://benpaodewoniu.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="平台 &amp;&amp; 公链 &amp;&amp; 项目 &amp;&amp; 方向" scheme="http://benpaodewoniu.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%B9%B3%E5%8F%B0-%E5%85%AC%E9%93%BE-%E9%A1%B9%E7%9B%AE-%E6%96%B9%E5%90%91/"/>
    
      <category term="NFT" scheme="http://benpaodewoniu.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%B9%B3%E5%8F%B0-%E5%85%AC%E9%93%BE-%E9%A1%B9%E7%9B%AE-%E6%96%B9%E5%90%91/NFT/"/>
    
      <category term="进阶" scheme="http://benpaodewoniu.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%B9%B3%E5%8F%B0-%E5%85%AC%E9%93%BE-%E9%A1%B9%E7%9B%AE-%E6%96%B9%E5%90%91/NFT/%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="eth" scheme="http://benpaodewoniu.github.io/tags/eth/"/>
    
  </entry>
  
  <entry>
    <title>cloudflare | 直连模式详解</title>
    <link href="http://benpaodewoniu.github.io/2024/07/02/cloudflare5/"/>
    <id>http://benpaodewoniu.github.io/2024/07/02/cloudflare5/</id>
    <published>2024-07-02T15:17:08.000Z</published>
    <updated>2024-07-02T15:17:35.741Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="网站设计" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="服务商" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E5%95%86/"/>
    
      <category term="Cloudflare" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E5%95%86/Cloudflare/"/>
    
    
      <category term="cloudflare" scheme="http://benpaodewoniu.github.io/tags/cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>evm | 获取 uniswap 的交易数据</title>
    <link href="http://benpaodewoniu.github.io/2024/07/02/evm8/"/>
    <id>http://benpaodewoniu.github.io/2024/07/02/evm8/</id>
    <published>2024-07-02T15:03:34.000Z</published>
    <updated>2024-07-04T03:29:21.632Z</updated>
    
    <content type="html"><![CDATA[<p>这里有几个方法。</p><ul><li><code>thegraph</code></li><li><code>uniswap</code> 的接口</li><li><code>oklink</code> 的接口</li></ul><a id="more"></a><h2 id="thegraph"><a href="#thegraph" class="headerlink" title="thegraph"></a>thegraph</h2><ul><li><a href="/2024/06/10/thegraph0/">thegraph | thegraph 平台</a></li></ul><p>这个平台的缺点就是免费的版本过几天就不能用了。</p><p>不可以商用。</p><h2 id="uniswap-接口"><a href="#uniswap-接口" class="headerlink" title="uniswap 接口"></a>uniswap 接口</h2><p>这里主要是调用 <code>uniswap</code> 网页自己所暴漏的接口。一共有两个经典页面，按 <code>F12</code> 自己找接口。</p><ul><li><a href="https://app.uniswap.org/explore/pools/ethereum/0x045a15bd4999cf396220f587fc77b4d159e8e67b">pool 界面</a></li><li><a href="https://app.uniswap.org/explore/tokens/ethereum/0xa8218cbdb4accce36ee92874fe34a999abc30a7a">token 界面</a></li></ul><p><code>pool</code> 界面是以 <code>pair</code> 的交易为主体，包含卖出、买入、添加流动性、去除流动性。</p><p><code>token</code> 界面是所有 <code>pair</code> 的交易，包含买入和卖出。</p><p>但是，这个接口的稳定性非常差。</p><h2 id="oklink"><a href="#oklink" class="headerlink" title="oklink"></a>oklink</h2><ul><li><a href="https://www.oklink.com/docs/zh/#explorer-api-tracker">oklink</a></li></ul><p><img src="/images/evm/8_0.png" alt=""></p><p>完美解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里有几个方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;thegraph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uniswap&lt;/code&gt; 的接口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;oklink&lt;/code&gt; 的接口&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="项目经历" scheme="http://benpaodewoniu.github.io/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/"/>
    
      <category term="区块链" scheme="http://benpaodewoniu.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="大型" scheme="http://benpaodewoniu.github.io/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/%E5%A4%A7%E5%9E%8B/"/>
    
      <category term="dapp" scheme="http://benpaodewoniu.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/dapp/"/>
    
      <category term="平台 &amp;&amp; 公链 &amp;&amp; 项目 &amp;&amp; 方向" scheme="http://benpaodewoniu.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%B9%B3%E5%8F%B0-%E5%85%AC%E9%93%BE-%E9%A1%B9%E7%9B%AE-%E6%96%B9%E5%90%91/"/>
    
      <category term="quantify" scheme="http://benpaodewoniu.github.io/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/%E5%A4%A7%E5%9E%8B/quantify/"/>
    
      <category term="gateway" scheme="http://benpaodewoniu.github.io/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/%E5%A4%A7%E5%9E%8B/quantify/gateway/"/>
    
      <category term="eth" scheme="http://benpaodewoniu.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%B9%B3%E5%8F%B0-%E5%85%AC%E9%93%BE-%E9%A1%B9%E7%9B%AE-%E6%96%B9%E5%90%91/eth/"/>
    
      <category term="evm" scheme="http://benpaodewoniu.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%B9%B3%E5%8F%B0-%E5%85%AC%E9%93%BE-%E9%A1%B9%E7%9B%AE-%E6%96%B9%E5%90%91/evm/"/>
    
      <category term="dex" scheme="http://benpaodewoniu.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%B9%B3%E5%8F%B0-%E5%85%AC%E9%93%BE-%E9%A1%B9%E7%9B%AE-%E6%96%B9%E5%90%91/eth/dex/"/>
    
      <category term="ok" scheme="http://benpaodewoniu.github.io/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/%E5%A4%A7%E5%9E%8B/quantify/gateway/ok/"/>
    
      <category term="进阶" scheme="http://benpaodewoniu.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%B9%B3%E5%8F%B0-%E5%85%AC%E9%93%BE-%E9%A1%B9%E7%9B%AE-%E6%96%B9%E5%90%91/evm/%E8%BF%9B%E9%98%B6/"/>
    
      <category term="thegraph" scheme="http://benpaodewoniu.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/dapp/thegraph/"/>
    
      <category term="uniswap" scheme="http://benpaodewoniu.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%B9%B3%E5%8F%B0-%E5%85%AC%E9%93%BE-%E9%A1%B9%E7%9B%AE-%E6%96%B9%E5%90%91/eth/dex/uniswap/"/>
    
      <category term="oklink" scheme="http://benpaodewoniu.github.io/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/%E5%A4%A7%E5%9E%8B/quantify/gateway/ok/oklink/"/>
    
      <category term="进阶" scheme="http://benpaodewoniu.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%B9%B3%E5%8F%B0-%E5%85%AC%E9%93%BE-%E9%A1%B9%E7%9B%AE-%E6%96%B9%E5%90%91/eth/dex/uniswap/%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="eth" scheme="http://benpaodewoniu.github.io/tags/eth/"/>
    
  </entry>
  
  <entry>
    <title>cloudflare | 对 websocket 有效吗</title>
    <link href="http://benpaodewoniu.github.io/2024/07/02/cloudflare4/"/>
    <id>http://benpaodewoniu.github.io/2024/07/02/cloudflare4/</id>
    <published>2024-07-02T15:01:55.000Z</published>
    <updated>2024-07-02T15:02:22.624Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="网站设计" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="服务商" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E5%95%86/"/>
    
      <category term="Cloudflare" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E5%95%86/Cloudflare/"/>
    
    
      <category term="cloudflare" scheme="http://benpaodewoniu.github.io/tags/cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>aws | 使用 IAM 开启他人管理</title>
    <link href="http://benpaodewoniu.github.io/2024/07/02/aws6/"/>
    <id>http://benpaodewoniu.github.io/2024/07/02/aws6/</id>
    <published>2024-07-02T04:54:17.000Z</published>
    <updated>2024-07-02T15:20:02.983Z</updated>
    
    <content type="html"><![CDATA[<p>如果你的账户下面有一个实例想和别人共享管理，可以使用 <code>IAM</code> 方式。</p><p>原理是，创建一个新的 <code>IAM</code> 账户（带有用户名和密码），然后这账户发送给需要的人，别人登录这个账户，就能看到要管理的实例了。</p><p>这里用 <code>EC2</code> 的实例作一个例子，其他的产品原理一样。</p><a id="more"></a><h2 id="创建-IAM-账户"><a href="#创建-IAM-账户" class="headerlink" title="创建 IAM 账户"></a>创建 IAM 账户</h2><p>登陆控制台后，搜索 <code>IAM</code>。</p><p><img src="/images/aws/6_0.png" alt=""></p><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p><img src="/images/aws/6_1.png" alt=""></p><p>如果你想要多个人一起共享账户，那么，红框中就不要选。</p><p>另外，用户名就是登录名。</p><p><img src="/images/aws/6_2.png" alt=""></p><h2 id="创建策略"><a href="#创建策略" class="headerlink" title="创建策略"></a>创建策略</h2><p>所谓的策略就是，让 <code>IAM</code> 对什么资源有什么权限访问。</p><p><img src="/images/aws/6_3.png" alt=""></p><p>编辑权限。</p><p><img src="/images/aws/6_4.png" alt=""></p><p>一般的语法是这样的，以 <code>EC2</code> 为例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line">    <span class="attr">"Statement"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">            <span class="attr">"Action"</span>: [</span><br><span class="line">                <span class="string">"ec2:DescribeInstances"</span>,</span><br><span class="line">                <span class="string">"ec2:StartInstances"</span>,</span><br><span class="line">                <span class="string">"ec2:StopInstances"</span>,</span><br><span class="line">                <span class="string">"ec2:TerminateInstances"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"Resource"</span>: [</span><br><span class="line">                <span class="string">"arn:aws:ec2:region:account-id:instance/instance-id"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>region</code><ul><li>区域代码</li><li>每个区域都有自己的代码，比如香港就是 <code>ap-east-1</code></li></ul></li><li><code>account-id</code><ul><li>账户的 <code>12</code> 位 <code>ID</code></li></ul></li><li><code>instance-id</code><ul><li>实例 <code>ID</code></li></ul></li></ul><p>一个例子如 <code>&quot;arn:aws:ec2:ap-east-1:5901837****:instance/i-0ea0611***4748&quot;</code></p><ul><li><code>Action</code><ul><li>赋予什么权限</li></ul></li></ul><p>如果是全权限，全实例可以这样子</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line">    <span class="attr">"Statement"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">            <span class="attr">"Action"</span>: <span class="string">"*"</span>,</span><br><span class="line">            <span class="attr">"Resource"</span>: <span class="string">"*"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面进行保存和创建策略就好了。「创建策略的时候，记得取一个好事识别的名字，后面要继续用」</p><h2 id="加载策略"><a href="#加载策略" class="headerlink" title="加载策略"></a>加载策略</h2><p><img src="/images/aws/6_5.png" alt=""></p><p>红框刷新，绿框搜索，选择刚才弄好的策略就好了。</p><h2 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h2><p>创建好之后，会给你一个登录地址，还有登录名和密码。</p><p><img src="/images/aws/6_6.png" alt=""></p><p>如果忘记了登录地址，可以查看下面的图片。</p><p><img src="/images/aws/6_7.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你的账户下面有一个实例想和别人共享管理，可以使用 &lt;code&gt;IAM&lt;/code&gt; 方式。&lt;/p&gt;
&lt;p&gt;原理是，创建一个新的 &lt;code&gt;IAM&lt;/code&gt; 账户（带有用户名和密码），然后这账户发送给需要的人，别人登录这个账户，就能看到要管理的实例了。&lt;/p&gt;
&lt;p&gt;这里用 &lt;code&gt;EC2&lt;/code&gt; 的实例作一个例子，其他的产品原理一样。&lt;/p&gt;
    
    </summary>
    
      <category term="网站设计" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="服务商" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E5%95%86/"/>
    
      <category term="AWS" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E5%95%86/AWS/"/>
    
    
      <category term="aws" scheme="http://benpaodewoniu.github.io/tags/aws/"/>
    
  </entry>
  
  <entry>
    <title>tcp | 防御 TCP/IP 的攻击</title>
    <link href="http://benpaodewoniu.github.io/2024/06/27/tcp0/"/>
    <id>http://benpaodewoniu.github.io/2024/06/27/tcp0/</id>
    <published>2024-06-27T01:27:21.000Z</published>
    <updated>2024-06-27T07:14:04.425Z</updated>
    
    <content type="html"><![CDATA[<p>这里的防御指的是 <code>TCP/IP</code> 层的 <code>DDOS</code>。</p><p>主要是比较</p><ul><li><code>AWS</code></li><li><code>CloudFlare</code></li></ul><a id="more"></a><h2 id="AWS"><a href="#AWS" class="headerlink" title="AWS"></a>AWS</h2><p>现在 <code>AWS</code> 提供 <code>4</code> 款产品，</p><ul><li><code>cloudfront</code></li><li><code>WAF</code></li><li><code>shield</code></li><li><code>shield adv</code></li></ul><p>其中，<code>cloudfront</code> 是 <code>CDN</code>，<code>WAF</code> 是第 <code>7</code> 层的防御，也就是 <code>HTTP</code> 层的 <code>DDOS</code> 防御。</p><p>相当于，<code>cloudflare</code> 的 免费版本 = <code>cloudfront</code> + <code>WAF</code>，当然，<code>AWS</code> 可能对大陆更友好一些。这两个产品并不防御 <code>TCP</code> 的 <code>DDOS</code>，只防御 <code>HTTP</code> 层的。</p><p>另外，两款，<code>shield</code> 和 <code>shield adv</code> 是防御 <code>TCP</code> 攻击的。</p><p><code>shield</code> 是所有设备自带的，它的作用是，如果 <code>AWS</code> 其他机器被 <code>TCP DDOS</code> 攻击后，你的机器不受影响。</p><p><code>shield adv</code> 是我们要采购的产品，其定价为 <code>3000U</code> 一个月，年付。并且，<code>3000U</code> 是最低费用。</p><p>他们是这样收费的，这个账号购买了 <code>shield adv</code> 产品后，账号下的所有机器都可以开启该功能，域名和端口不限制数量。</p><p>但是，上面的 <code>3000U</code> 只是所谓的入场券费，如果真的有 <code>DDOS</code> 打进来，还要根据流量来付流量费，如果需要技术支持，还要费一种叫做 <code>srt</code> 的费用。</p><p>当然，够买了 <code>shield adv</code> 之后，会赠送一些基础的 <code>WAF</code> 服务。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>以账号购买，所有机器、域名、端口都能享受到</li><li>大陆用户相对友好</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>攻击是根据 <code>DDOS</code> 流量付费的</li></ul><h2 id="Cloudflare"><a href="#Cloudflare" class="headerlink" title="Cloudflare"></a>Cloudflare</h2><p><code>CF</code> 的企业级套餐「最高付费套餐，其他两个付费套餐防不了全部 <code>TCP</code> 端口，几乎没啥用」是以账号购买，账号下可以建立多个项目，其中，企业级套餐每月最底消费是 <code>5000U</code>，至少付 <code>12</code> 个月。</p><p>如果签订后，需要进行合同签署。</p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>无上限防御</li><li>也可以让 <code>CF</code> 建立大陆节点「估计非常贵」</li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li><code>5000</code> 只是个基础，增加域名，端口都要付费</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里的防御指的是 &lt;code&gt;TCP/IP&lt;/code&gt; 层的 &lt;code&gt;DDOS&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;主要是比较&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AWS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CloudFlare&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="网站设计" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="服务商" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E5%95%86/"/>
    
      <category term="Cloudflare" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E5%95%86/Cloudflare/"/>
    
      <category term="AWS" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E5%95%86/AWS/"/>
    
      <category term="tcp" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/tcp/"/>
    
      <category term="Shield" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E5%95%86/AWS/Shield/"/>
    
    
      <category term="tcp" scheme="http://benpaodewoniu.github.io/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>aws | 流量走内网</title>
    <link href="http://benpaodewoniu.github.io/2024/06/24/aws5/"/>
    <id>http://benpaodewoniu.github.io/2024/06/24/aws5/</id>
    <published>2024-06-24T15:47:42.000Z</published>
    <updated>2024-07-02T08:59:40.705Z</updated>
    
    <content type="html"><![CDATA[<p>图中的网络区域选择一样的就行。</p><a id="more"></a><p><img src="/images/aws/5_0.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图中的网络区域选择一样的就行。&lt;/p&gt;
    
    </summary>
    
      <category term="网站设计" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="服务商" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E5%95%86/"/>
    
      <category term="AWS" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E5%95%86/AWS/"/>
    
    
      <category term="aws" scheme="http://benpaodewoniu.github.io/tags/aws/"/>
    
  </entry>
  
  <entry>
    <title>aion | 搭建一个测试服务器</title>
    <link href="http://benpaodewoniu.github.io/2024/06/24/aion2/"/>
    <id>http://benpaodewoniu.github.io/2024/06/24/aion2/</id>
    <published>2024-06-24T15:42:18.000Z</published>
    <updated>2024-07-02T15:20:29.447Z</updated>
    
    <content type="html"><![CDATA[<p>这里要搭建的是一个最高在线 <code>2000 - 4000</code> 人的大型 <code>MMO</code> 游戏的游戏服务器。</p><a id="more"></a><p>目标是</p><ul><li>抵御 <code>DDOS</code></li><li>用户有良好的访问体验</li></ul><h2 id="服务器选择"><a href="#服务器选择" class="headerlink" title="服务器选择"></a>服务器选择</h2><p>因为，这只是删档测试，所以，不需要考虑多服务器，多地区的情况。这里采用的架构是 <code>gameserver</code>「计算服务器」+ <code>dataserver</code>「数据服务器」。</p><p>关于配置就不说了，根据实际情况来就行，这次肯定是按照基本配置的两倍来配比的。</p><p>购买的是 AWS 服务器，要记住把没用的端口全部关了，包括 <code>80</code>.然后 <code>22</code> 的 <code>ssh</code> 端口也要进行修改。</p><h2 id="DDOS-防御商的选择"><a href="#DDOS-防御商的选择" class="headerlink" title="DDOS 防御商的选择"></a>DDOS 防御商的选择</h2><p>因为在 <code>AWS</code> 中，所以，防御商有两个</p><ul><li><code>cloudfront</code><ul><li><code>AWS</code> 自己的</li></ul></li><li><code>cloudflare</code></li></ul><p>毫无疑问，肯定 <code>cloudflare</code>。因为，<code>CF</code> 的防御是无上限流量，其他的服务商，都是免费了一定的流量，超过后开始计费，并且，收费非常贵。真要有 <code>DDOS</code> 打过来，账单直接 <code>GG</code>。</p><p>这里说一下存在的情况。游戏服务器总共有两种通信协议</p><ul><li><code>https</code>「<code>443</code>」</li><li><code>TCP + Socket</code>「其他端口」</li></ul><p>所以，这里面只有两个选择</p><ul><li><code>CF</code> 免费版本 + <code>TCP</code> 措施</li><li><code>CF</code> 最高付费版本<ul><li>没尝试过</li></ul></li></ul><p>至于 <code>CF</code> 其他两个付费版本可以忽略，和免费版本差别不大。</p><h3 id="CF-免费版本-TCP-措施"><a href="#CF-免费版本-TCP-措施" class="headerlink" title="CF 免费版本 + TCP 措施"></a>CF 免费版本 + TCP 措施</h3><p>游戏服务器，共有两个子域名</p><ul><li><code>aa</code><ul><li>走 <code>https</code> 协议</li><li>走 <code>CF</code> 代理</li></ul></li><li><code>cc</code><ul><li>走 <code>tcp + socket</code> 协议</li><li>走 <code>CF DNS</code> 直连模式</li></ul></li></ul><p>所以，<code>aa</code> 可以进行 <code>CF</code> 代理模式，而 <code>cc</code> 由于走 <code>tcp</code> 所以无法进行 <code>CF</code> 代理模式，只能选择直连。至于为什么请参考。</p><ul><li><a href="/2024/06/24/cloudflare0/">cloudflare | CF 的简单应用</a></li></ul><p>如果，<code>cc</code> 走直连的话，会出现问题，假如有人进行抓包，很容易获得目标服务器的 <code>IP</code>，那么，<code>CF</code> 形同虚设了。</p><p>所以，要把 <code>cc</code> 的 <code>TCP</code> 流量也走一层代理。免费版本的 <code>CF</code> 肯定指望不上了，但是，可以用 <code>nginx</code> 进行代理转发。</p><ul><li><a href="/2024/06/24/nginx12/">nginx | 转发 tcp 端口流量</a></li></ul><p>这样子，整个服务器的架构又增加了一个代理服务器。</p><p><code>3</code> 个服务器之间的数据传递如下</p><ul><li><code>aa</code> 子域名，走 <code>https</code> 协议，通过 <code>CF</code> 的代理转发给 <code>gameserver</code> 服务器上</li><li><code>cc</code> 子域名走 <code>TCP</code> 协议，先通信到代理服务器上，然后通过代理服务器从内网走到 <code>gameserver</code> 服务器上</li></ul><p>由于代理服务器只是进行状态的转发，硬件配置不需要很大，<code>2核4G</code>足够了，带宽大一些即可。「如果觉得一个代理服务器不够，可以进行 <code>DNS</code> 负载均衡，上多个代理服务器」</p><p>代理和 <code>gameserver</code> 能走内网就走内网。</p><p>这个方案当然不能防御住 <code>TCP/IP</code> 的攻击，但是，可以有效的将服务器的 <code>IP</code> 隐藏起来。后续万一出问题，也可以建立防护。但是，一旦 <code>IP</code> 暴漏，后续啥措施都没用了。</p><p>关于 <code>TCP/IP</code> 层的第三方防御请参考。</p><ul><li><a href="/2024/06/27/tcp0/">tcp | 防御 TCP/IP 的攻击</a></li></ul><h2 id="新思路-2024-6-27"><a href="#新思路-2024-6-27" class="headerlink" title="新思路 2024-6-27"></a>新思路 2024-6-27</h2><p>全部采用直连的方式，等有 <code>DDOS</code> 攻击的时候，弄一个代理服务器，然后代理服务器套上防 <code>DDOS</code> 的服务。游戏服务器所有的入流量均走代理服务器的 <code>IP</code>。</p><h2 id="新思路-2024-7-2"><a href="#新思路-2024-7-2" class="headerlink" title="新思路 2024-7-2"></a>新思路 2024-7-2</h2><p>将 <code>TCP</code> 通信变成 <code>websocket</code> 通信。</p><ul><li><a href="/2024/07/02/cloudflare4/">cloudflare | 对 websocket 有效吗</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里要搭建的是一个最高在线 &lt;code&gt;2000 - 4000&lt;/code&gt; 人的大型 &lt;code&gt;MMO&lt;/code&gt; 游戏的游戏服务器。&lt;/p&gt;
    
    </summary>
    
      <category term="项目经历" scheme="http://benpaodewoniu.github.io/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/"/>
    
      <category term="大型" scheme="http://benpaodewoniu.github.io/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/%E5%A4%A7%E5%9E%8B/"/>
    
      <category term="aion" scheme="http://benpaodewoniu.github.io/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/%E5%A4%A7%E5%9E%8B/aion/"/>
    
      <category term="运维" scheme="http://benpaodewoniu.github.io/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/%E5%A4%A7%E5%9E%8B/aion/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="aion" scheme="http://benpaodewoniu.github.io/tags/aion/"/>
    
  </entry>
  
  <entry>
    <title>nginx | 转发 tcp 端口流量</title>
    <link href="http://benpaodewoniu.github.io/2024/06/24/nginx12/"/>
    <id>http://benpaodewoniu.github.io/2024/06/24/nginx12/</id>
    <published>2024-06-24T15:38:15.000Z</published>
    <updated>2024-06-24T16:02:00.957Z</updated>
    
    <content type="html"><![CDATA[<p>这里借助 <code>nginx</code> ，将 <code>tcp + socket</code> 请求发到一个代理服务器上，然后代理服务器再转发给目标服务器。</p><p>其中，<code>nginx</code> 是配置在代理服务器上的。</p><a id="more"></a><p>首先，我们要知道一些前提。</p><p>转发 <code>TCP</code> 端口是要配置在 <code>stream</code> 里面。</p><p><code>stream</code> 模块的配置需要特定的位置。常见的位置包括：</p><ul><li><code>/etc/nginx/nginx.conf</code> ：如果你的 <code>nginx.conf</code> 文件是单一的配置文件。</li><li><code>/etc/nginx/conf.d/</code> 目录下的一个单独配置文件，例如 <code>tcp_forward.conf</code> 。</li></ul><p>一个配置如下「下面只是简单配置」</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/nginx/nginx.conf</span></span><br><span class="line"></span><br><span class="line">user nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line"></span><br><span class="line"><span class="comment"># http模块配置</span></span><br><span class="line">http &#123;</span><br><span class="line">    <span class="built_in">..</span>.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># stream模块配置</span></span><br><span class="line">stream &#123;</span><br><span class="line">   <span class="built_in"> server </span>&#123;</span><br><span class="line">        listen 17777;</span><br><span class="line">        proxy_pass 172.31.1.194:13000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里说一下这个配置的点</p><ul><li>代理服务器开启 <code>17777</code>，然后转发到目标服务器 <code>13000</code> 端口</li><li><code>172.31.1.194</code> 是局域网 <code>IP</code>，需要保证两台服务器位于同一网段<ul><li><a href="/2024/06/24/aws5/">aws | 流量走内网</a></li></ul></li><li>目标服务器的安全组的 <code>13000</code> 端口的入流量规则，只接收来自代理服务器的流量，也填写局域网的 <code>IP</code></li></ul><p>咱们使用脚本验证。</p><p>首先，代理服务器配置好之后，必须重新启动 <code>nginx</code>。</p><p>目标服务器脚本。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端代码 server.py</span></span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义主机和端口</span></span><br><span class="line">HOST = <span class="string">'0.0.0.0'</span>  # 使用回环地址，也可以是服务器的公共<span class="built_in"> IP </span>地址</span><br><span class="line">PORT = 25535     # 端口号，可以自定义一个未被占用的端口号</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 socket 对象</span></span><br><span class="line">server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定主机和端口</span></span><br><span class="line">server_socket.bind((HOST, PORT))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始监听，允许最多一个连接请求</span></span><br><span class="line">server_socket.listen(1)</span><br><span class="line"><span class="builtin-name">print</span>(f<span class="string">"Server is listening on &#123;HOST&#125;:&#123;PORT&#125;..."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待客户端连接</span></span><br><span class="line">client_socket, client_address = server_socket.accept()</span><br><span class="line"><span class="builtin-name">print</span>(f<span class="string">"Connected by &#123;client_address&#125;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收数据并回显</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = client_socket.recv(1024)  # 接收数据，最多 1024 字节</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        break</span><br><span class="line">    <span class="builtin-name">print</span>(f<span class="string">"Received from client: &#123;data.decode()&#125;"</span>)</span><br><span class="line">    client_socket.sendall(data)  # 将接收到的数据返回给客户端</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">client_socket.close()</span><br><span class="line">server_socket.close()</span><br></pre></td></tr></table></figure><p>本地脚本</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端代码 client.py</span></span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义服务端的主机和端口</span></span><br><span class="line">HOST = <span class="string">'代理服务器的域名或者 IP'</span>  # 使用回环地址，也可以是服务器的公共<span class="built_in"> IP </span>地址</span><br><span class="line">PORT = 17777        # 与服务端相同的端口号</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 socket 对象</span></span><br><span class="line">client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接服务端</span></span><br><span class="line">client_socket.connect((HOST, PORT))</span><br><span class="line"><span class="builtin-name">print</span>(f<span class="string">"Connected to server at &#123;HOST&#125;:&#123;PORT&#125;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送数据</span></span><br><span class="line">message = <span class="string">"Hello, server!"</span></span><br><span class="line">client_socket.sendall(message.encode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收数据</span></span><br><span class="line">data = client_socket.recv(1024)  # 接收数据，最多 1024 字节</span><br><span class="line"><span class="builtin-name">print</span>(f<span class="string">"Received from server: &#123;data.decode()&#125;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">client_socket.close()</span><br></pre></td></tr></table></figure><p>经过 <code>nginx</code> 代理后，对外面暴漏的 <code>IP</code> 只是代理服务器 <code>IP</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里借助 &lt;code&gt;nginx&lt;/code&gt; ，将 &lt;code&gt;tcp + socket&lt;/code&gt; 请求发到一个代理服务器上，然后代理服务器再转发给目标服务器。&lt;/p&gt;
&lt;p&gt;其中，&lt;code&gt;nginx&lt;/code&gt; 是配置在代理服务器上的。&lt;/p&gt;
    
    </summary>
    
      <category term="网站设计" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="服务端" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
      <category term="nginx" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E7%AB%AF/nginx/"/>
    
    
      <category term="tcp" scheme="http://benpaodewoniu.github.io/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>cloudflare | CF 基本功能解析</title>
    <link href="http://benpaodewoniu.github.io/2024/06/24/cloudflare3/"/>
    <id>http://benpaodewoniu.github.io/2024/06/24/cloudflare3/</id>
    <published>2024-06-24T07:22:03.000Z</published>
    <updated>2024-06-24T07:23:41.662Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="网站设计" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="服务商" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E5%95%86/"/>
    
      <category term="Cloudflare" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E5%95%86/Cloudflare/"/>
    
    
      <category term="cloudflare" scheme="http://benpaodewoniu.github.io/tags/cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>cloudflare | 代理非标端口</title>
    <link href="http://benpaodewoniu.github.io/2024/06/24/cloudflare2/"/>
    <id>http://benpaodewoniu.github.io/2024/06/24/cloudflare2/</id>
    <published>2024-06-24T01:19:44.000Z</published>
    <updated>2024-06-27T07:34:42.277Z</updated>
    
    <content type="html"><![CDATA[<p>免费版本的 <code>cloudflare</code> 走非 <code>80</code>、<code>443</code> 端口。</p><a id="more"></a><p>如果开启了小云朵的代理，那么</p><ul><li><p><code>http</code></p><ul><li><code>80、8080、8880、2052、2082、2086、2095</code></li></ul></li><li><p><code>https</code></p><ul><li><code>443、2053、2083、2087、2096、8443</code></li></ul></li><li><p><a href="https://developers.cloudflare.com/fundamentals/reference/network-ports/">network-ports</a></p></li></ul><p>意思是，如果你的域名是 <code>xxx.com</code>，并且开启了 <code>https</code> 的 <code>2053</code> 访问，那么，你可以用 <code>CF</code> 代理访问 <code>https://xxx.com:2053</code></p><p>但是，其他端口比如 <code>https://xxx.com:13000</code> 是不能访问的。</p><p><code>CF</code> 有一个机制，可以让你访问 <code>https://xxx.com</code> 最后流量走的确实服务器的非 <code>443</code> 端口，就是 <code>origin rule</code> 配置。</p><ul><li><a href="https://blog.sundaysto.club/archives/443duan-kou-bei-zhan-yong-cloudflareshi-xian-fei-biao-zhun-duan-kou-de-dai-li">443端口被占用，cloudflare实现非标准端口的代理，以实现域名不加端口号的访问</a></li></ul><p>那是否有方法代理 <code>https://xxx.com:13000</code>,或许有方法，但是目前我没找到。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;免费版本的 &lt;code&gt;cloudflare&lt;/code&gt; 走非 &lt;code&gt;80&lt;/code&gt;、&lt;code&gt;443&lt;/code&gt; 端口。&lt;/p&gt;
    
    </summary>
    
      <category term="网站设计" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="服务商" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E5%95%86/"/>
    
      <category term="Cloudflare" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E5%95%86/Cloudflare/"/>
    
    
      <category term="cloudflare" scheme="http://benpaodewoniu.github.io/tags/cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>cloudflare | CF 之后 TCP + socket 还能通信吗</title>
    <link href="http://benpaodewoniu.github.io/2024/06/24/cloudflare1/"/>
    <id>http://benpaodewoniu.github.io/2024/06/24/cloudflare1/</id>
    <published>2024-06-23T18:00:04.000Z</published>
    <updated>2024-06-24T16:05:54.315Z</updated>
    
    <content type="html"><![CDATA[<p>先说结论，如果是免费版本 <code>CF</code>，那么，<code>TCP + socket</code> 是不能代理通信的。</p><p>因为免费版本只是接管了 <code>http</code> 层，把 <code>TCP</code> 层给禁掉了。但是，注意上面的话，是代理不能通信。</p><a id="more"></a><p>这里说一下如何在 <code>CF</code> 接管域名的情况下，进行 <code>TCP + socket</code> 通信</p><ul><li><code>DNS</code> 直连</li><li>使用其他域名</li><li><code>CF</code> 付费功能，<a href="https://www.cloudflare.com/zh-cn/application-services/products/cloudflare-spectrum/">Cloudflare Spectrum</a></li></ul><p>先弄一下脚本吧，就是 <code>server</code> 跑一个 <code>tcp + socket</code> 的服务，然后本地进行连接，如果，有输出，就说明调用成功。</p><p>测试是使用 <code>15000</code> 端口，在使用前，需要打开安全组和防火墙。</p><h2 id="server-py"><a href="#server-py" class="headerlink" title="server.py"></a>server.py</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义主机和端口</span></span><br><span class="line">HOST = <span class="string">'0.0.0.0'</span>  # 使用回环地址，也可以是服务器的公共<span class="built_in"> IP </span>地址</span><br><span class="line">PORT = 15000     # 端口号，可以自定义一个未被占用的端口号</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 socket 对象</span></span><br><span class="line">server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定主机和端口</span></span><br><span class="line">server_socket.bind((HOST, PORT))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始监听，允许最多一个连接请求</span></span><br><span class="line">server_socket.listen(1)</span><br><span class="line"><span class="builtin-name">print</span>(f<span class="string">"Server is listening on &#123;HOST&#125;:&#123;PORT&#125;..."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待客户端连接</span></span><br><span class="line">client_socket, client_address = server_socket.accept()</span><br><span class="line"><span class="builtin-name">print</span>(f<span class="string">"Connected by &#123;client_address&#125;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收数据并回显</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = client_socket.recv(1024)  # 接收数据，最多 1024 字节</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        break</span><br><span class="line">    <span class="builtin-name">print</span>(f<span class="string">"Received from client: &#123;data.decode()&#125;"</span>)</span><br><span class="line">    client_socket.sendall(data)  # 将接收到的数据返回给客户端</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">client_socket.close()</span><br><span class="line">server_socket.close()</span><br></pre></td></tr></table></figure><h2 id="client-py"><a href="#client-py" class="headerlink" title="client.py"></a>client.py</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端代码 client.py</span></span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义服务端的主机和端口</span></span><br><span class="line"><span class="comment"># HOST = '根域名'  # 使用回环地址，也可以是服务器的公共 IP 地址</span></span><br><span class="line"><span class="comment"># HOST = '子域名'  # 使用回环地址，也可以是服务器的公共 IP 地址</span></span><br><span class="line"><span class="comment"># HOST = 'ip'  # 使用回环地址，也可以是服务器的公共 IP 地址</span></span><br><span class="line">PORT = 15000        # 与服务端相同的端口号</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 socket 对象</span></span><br><span class="line">client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接服务端</span></span><br><span class="line">client_socket.connect((HOST, PORT))</span><br><span class="line"><span class="builtin-name">print</span>(f<span class="string">"Connected to server at &#123;HOST&#125;:&#123;PORT&#125;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送数据</span></span><br><span class="line">message = <span class="string">"Hello, server!"</span></span><br><span class="line">client_socket.sendall(message.encode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收数据</span></span><br><span class="line">data = client_socket.recv(1024)  # 接收数据，最多 1024 字节</span><br><span class="line"><span class="builtin-name">print</span>(f<span class="string">"Received from server: &#123;data.decode()&#125;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">client_socket.close()</span><br></pre></td></tr></table></figure><h2 id="DNS-直连"><a href="#DNS-直连" class="headerlink" title="DNS 直连"></a>DNS 直连</h2><p><img src="/images/cloudflare/1_0.png" alt=""></p><p>如果，子域名不走代理，而是走 <code>DNS</code> 直连，那么，<code>tcp + socket</code> 是可以连通的。</p><p>但是，别人可以进行抓包，抓到这个 <code>IP</code>，会导致 <code>CF</code> 防护形同虚设。</p><h2 id="其他域名"><a href="#其他域名" class="headerlink" title="其他域名"></a>其他域名</h2><p>就是将 <code>CF</code> 接管的域名放弃，不用来连接 <code>tcp</code> 层通信，重新买一个域名。</p><p>这个域名可以直连，也可以用反向代理。</p><h2 id="Spectrum"><a href="#Spectrum" class="headerlink" title="Spectrum"></a>Spectrum</h2><p>这个只有 <code>CF</code> 付费版本才会带有这个功能。</p><p>但是，很不幸，<code>CF</code> 有三种付费模式。</p><ul><li><code>Pro</code></li><li><code>Business</code></li><li><code>Enterprise</code></li></ul><p>其中只有 <code>Enterprise</code> 才具备任意 <code>TCP/UDP</code> 端口连接。而 <code>Pro</code> 只支持 <code>ssh</code> 的 <code>22</code> 和 我的世界的 <code>22535</code>，<code>Business</code> 只比 <code>Pro</code> 多了一个 <code>RDP</code>「远程桌面连接」。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先说结论，如果是免费版本 &lt;code&gt;CF&lt;/code&gt;，那么，&lt;code&gt;TCP + socket&lt;/code&gt; 是不能代理通信的。&lt;/p&gt;
&lt;p&gt;因为免费版本只是接管了 &lt;code&gt;http&lt;/code&gt; 层，把 &lt;code&gt;TCP&lt;/code&gt; 层给禁掉了。但是，注意上面的话，是代理不能通信。&lt;/p&gt;
    
    </summary>
    
      <category term="网站设计" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="服务商" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E5%95%86/"/>
    
      <category term="Cloudflare" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E5%95%86/Cloudflare/"/>
    
    
      <category term="cloudflare" scheme="http://benpaodewoniu.github.io/tags/cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>cloudflare | CF 的简单应用</title>
    <link href="http://benpaodewoniu.github.io/2024/06/24/cloudflare0/"/>
    <id>http://benpaodewoniu.github.io/2024/06/24/cloudflare0/</id>
    <published>2024-06-23T18:00:01.000Z</published>
    <updated>2024-06-24T06:59:13.778Z</updated>
    
    <content type="html"><![CDATA[<p>这里简单的说一下 <code>CF</code> 的作用。</p><ul><li><a href="https://cloudflare.com/">cloudflare</a></li></ul><a id="more"></a><p>首先 <code>CF</code> 主营业务上是一个 <code>CDN</code>，而且是业内最强，性价比最高的 <code>CDN</code>，但是，它并不支持大陆的 <code>IP</code> 访问。（我实际用大陆 <code>IP</code> 访问也没问题）</p><p><code>CDN</code> 是多节点内容分发，处于这个功能它可以有效的抗 <code>DDOS</code>，并且，它的防御号称无流量上限，如果，你只是一个小网站主，用免费套餐即可。</p><p><code>CF</code> 定价也很便宜，有月付和年付的区别。</p><p>我这里说一下 <code>CF</code> 简单的原理，通常咱们访问一个域名，域名服务器会经过查询，查询到 <code>IP</code> 后，返回回来，然后访问。所以，<code>CF</code> 的原理就是，如果你想用 <code>CF</code> 的服务，需要把域名托管到 <code>CF</code> 的 <code>DNS</code> 服务器（很简单，只需要修改服务器就好了）。这个时候，如果，你访问域名，首先会进入 <code>CF</code> 的域名服务器，你可以在 <code>CF</code> 中设置一些规则，比如什么区域不能进、符合什么规则的流量才放行等等，当然也可以直接开启 <code>CF 5 秒盾</code>，进行最严格防御。如果流量通过 <code>CF</code> 中设置的规则后，假设你用的是 <code>DNS</code> 直连，那么，它后续和普通的 <code>DNS</code> 服务器没区别。</p><p>但是，<code>DNS</code> 直连式没有任何意义的，因为，直连的 <code>DNS</code> 会暴漏你的 <code>IP</code>，别人直接打你的 <code>IP</code>，就会绕过 <code>CF</code> 防护。</p><p>所以，一般来说，<code>CF</code> 的 <code>DNS</code> 都是代理。如果是代理的话，<code>CF</code> 的 <code>DNS</code> 服务器，会内部再用一个 <code>IP</code> 去请求你真 <code>IP</code> 的服务器，但是，对外反馈的是假的 <code>IP</code>，这就有效的保护了你的服务器的 <code>IP</code>。</p><p>换句话说，一旦，你的服务器的 <code>IP</code> 被人知道，那么，<code>CF</code> 的防护一点用处都没有。</p><p>另外，说一下 <code>CF</code> 的几个重点要知道的事情</p><ul><li><code>CF</code> 的方式，是全托管，你的子域名、根域名全部都在 <code>CF</code> 下面，因为，你是将域名服务器给修改了。对比 <code>AWS</code> 的 <code>cloudfront</code>，它只用子域名就好了，不需要全部托管</li><li><code>CF</code> 的免费版本只能用在 <code>http/https</code> 这一层。如果你使用 <code>CF</code> 的免费版本，如果，你的域名下面的服务器，有 <code>TCP + socket</code> 通信，那么是不能用的，这么说，也不全面，详情请看<ul><li><a href="/2024/06/24/cloudflare1/">cloudflare | CF 之后 TCP + socket 还能通信吗</a></li></ul></li><li><code>CF</code> 默认只能代理几个标准端口，如 <code>80</code>、<code>443</code>，如果是其他端口，请看<ul><li><a href="/2024/06/24/cloudflare2/">cloudflare | 代理非标端口</a></li></ul></li></ul><p>这里简单的说一下整个过程（注意我并不会手把手地说，而是说一下某一步骤的注意事项，具体步骤在网上已经非常详细了）</p><ul><li>创建网站</li><li>贴上域名，下一步（套餐选择 <code>free</code> 即可）<ul><li>如果你之前域名有解析，那么，<code>CF</code> 自动会把相关的字段复制过来</li></ul></li><li>域名更换 <code>CF</code> 的 <code>DNS</code> 服务器<ul><li>很简单，每个域名服务商平台都具备这个功能，上网搜一下就好了</li></ul></li><li>替换完成后，点击让 <code>CF</code> 检查域名服务器<ul><li>通过后会有邮件通知你</li></ul></li></ul><p>上面其实就已经结束了。</p><p>以后再添加相关的域名解析是直接在 <code>CF</code> 上添加的。</p><p><img src="/images/cloudflare/0_0.png" alt=""></p><p>这里说一下我的经历。</p><p>我是使用 <a href="/2024/03/08/wordpress10/">letsencrypt</a> 做的证书，在没用 <code>CF</code> 的时候，我就可以进行 <code>https</code> 访问。</p><p>然后经历过上面的步骤后，我在 <code>SSL/TLS</code> 中选择了严格模式</p><p><img src="/images/cloudflare/0_1.png" alt=""></p><p>这并没有什么问题。</p><p>但是，我有一个纯净域名，使用 <code>CF</code> 提供的证书，一直不能用 <code>https</code> 访问，非常奇怪。。。</p><p><img src="/images/cloudflare/0_2.png" alt=""></p><p>如果，你不会编写 <code>CF</code> 的规则，你可以直接启动 <code>5 秒盾</code>。</p><p><img src="/images/cloudflare/0_3.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里简单的说一下 &lt;code&gt;CF&lt;/code&gt; 的作用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cloudflare.com/&quot;&gt;cloudflare&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="网站设计" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="服务商" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E5%95%86/"/>
    
      <category term="Cloudflare" scheme="http://benpaodewoniu.github.io/categories/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/%E6%9C%8D%E5%8A%A1%E5%95%86/Cloudflare/"/>
    
    
      <category term="cloudflare" scheme="http://benpaodewoniu.github.io/tags/cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>centos | ssh 更改端口</title>
    <link href="http://benpaodewoniu.github.io/2024/06/22/centos1/"/>
    <id>http://benpaodewoniu.github.io/2024/06/22/centos1/</id>
    <published>2024-06-21T16:26:15.000Z</published>
    <updated>2024-06-21T16:37:38.144Z</updated>
    
    <content type="html"><![CDATA[<p><code>centos</code> 的 <code>ssh</code> 默认是 <code>22</code>。</p><a id="more"></a><h2 id="更改-ssh-端口"><a href="#更改-ssh-端口" class="headerlink" title="更改 ssh 端口"></a>更改 ssh 端口</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi <span class="regexp">/etc/</span>ssh<span class="regexp">/sshd_config</span></span><br></pre></td></tr></table></figure><p>将 <code>Port</code> 修改成你想要的端口号，这里建议保留一下 <code>22</code>，防止出错，连不上服务器。</p><h2 id="重启-ssh"><a href="#重启-ssh" class="headerlink" title="重启 ssh"></a>重启 ssh</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">systemctl</span> <span class="selector-tag">restart</span> <span class="selector-tag">sshd</span><span class="selector-class">.service</span></span><br></pre></td></tr></table></figure><p>如果你执行这一步的时候出现 <code>Job for sshd.service failed because the control process exited with error</code>，说明 <code>SELinux</code> 允许的 <code>ssh</code> 端口和你配置的不一致，所以，你需要自己在 <code>SELinux</code> 中注册一下。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo semanage<span class="built_in"> port </span>-a -t ssh_port_t -p tcp 11234</span><br></pre></td></tr></table></figure><p>这里添加一下你要用的端口，然后重新启动 <code>ssh</code> 服务。</p><p>这里要注意的是，如果你启动了防火墙千万在断开链接之前，先开启这个端口的防火墙，否则将会连接不上。</p><ul><li><a href="/2024/06/22/centos0/">centos | 防火墙开启和用法</a></li></ul><p>如果你不幸没开防火墙，导致连不上，请参考</p><ul><li><a href="/2024/03/29/aws4/">aws | 修改 SSH 端口忘记打开防火墙</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;centos&lt;/code&gt; 的 &lt;code&gt;ssh&lt;/code&gt; 默认是 &lt;code&gt;22&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://benpaodewoniu.github.io/categories/linux/"/>
    
      <category term="centos" scheme="http://benpaodewoniu.github.io/categories/linux/centos/"/>
    
    
      <category term="centos" scheme="http://benpaodewoniu.github.io/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>centos | 防火墙开启和用法</title>
    <link href="http://benpaodewoniu.github.io/2024/06/22/centos0/"/>
    <id>http://benpaodewoniu.github.io/2024/06/22/centos0/</id>
    <published>2024-06-21T16:26:13.000Z</published>
    <updated>2024-06-21T16:41:55.281Z</updated>
    
    <content type="html"><![CDATA[<p>防火墙相关。</p><a id="more"></a><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install firewalld <span class="comment"># 安装防火墙</span></span><br><span class="line">sudo systemctl start firewalld <span class="comment"># 开启防火墙</span></span><br><span class="line">sudo systemctl stop firewalld <span class="comment"># 关闭防火墙</span></span><br><span class="line">sudo firewall-<span class="keyword">cmd</span><span class="bash"> --reload <span class="comment"># 重启防火墙，修改配置后要进行这个命令</span></span></span><br><span class="line">sudo firewall-<span class="keyword">cmd</span><span class="bash"> --state <span class="comment"># 查看状态</span></span></span><br><span class="line">sudo firewall-<span class="keyword">cmd</span><span class="bash"> --query-port=80/tcp <span class="comment"># 查看相关端口</span></span></span><br><span class="line">sudo firewall-<span class="keyword">cmd</span><span class="bash"> --permanent --list-ports <span class="comment"># 查看所有的开放端口</span></span></span><br><span class="line">sudo firewall-<span class="keyword">cmd</span><span class="bash"> --permanent --add-port=8080/tcp <span class="comment"># 开启端口</span></span></span><br><span class="line">sudo firewall-<span class="keyword">cmd</span><span class="bash"> --permanent --add-port=8083-8085/tcp <span class="comment"># 开启某一系列端口</span></span></span><br><span class="line">sudo firewall-<span class="keyword">cmd</span><span class="bash"> --permanent --remove-port=8083-8085/tcp <span class="comment"># 移除端口</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;防火墙相关。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://benpaodewoniu.github.io/categories/linux/"/>
    
      <category term="centos" scheme="http://benpaodewoniu.github.io/categories/linux/centos/"/>
    
    
      <category term="centos" scheme="http://benpaodewoniu.github.io/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>python | 用户相关</title>
    <link href="http://benpaodewoniu.github.io/2024/06/18/python207/"/>
    <id>http://benpaodewoniu.github.io/2024/06/18/python207/</id>
    <published>2024-06-18T15:43:34.000Z</published>
    <updated>2024-06-18T15:43:59.088Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="python" scheme="http://benpaodewoniu.github.io/categories/python/"/>
    
      <category term="模块" scheme="http://benpaodewoniu.github.io/categories/python/%E6%A8%A1%E5%9D%97/"/>
    
      <category term="selenium" scheme="http://benpaodewoniu.github.io/categories/python/%E6%A8%A1%E5%9D%97/selenium/"/>
    
    
      <category term="python" scheme="http://benpaodewoniu.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>ok | ok api 平台对接</title>
    <link href="http://benpaodewoniu.github.io/2024/06/18/ok1/"/>
    <id>http://benpaodewoniu.github.io/2024/06/18/ok1/</id>
    <published>2024-06-17T16:01:07.000Z</published>
    <updated>2024-06-17T16:25:01.609Z</updated>
    
    <content type="html"><![CDATA[<p><code>ok api</code> 其实分为两种</p><ul><li><code>oklink</code><ul><li><a href="/2024/03/21/ok0/">oklink</a></li></ul></li><li><code>okapi</code><ul><li>这篇文章主要说这个</li><li>这里的 api 指的是平台 api，但是，平台 api 又分为两种</li><li><a href="https://www.okx.com/docs-v5/zh/#public-data">cex</a></li><li><a href="https://www.okx.com/zh-hans/web3/build/docs/home/welcome">链上</a></li></ul></li></ul><a id="more"></a><p>这里主要贴一下 <code>okpi</code> 的认证。</p><p>这里主要是抓取了 <code>ok</code> 平台的链上挂单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timezone</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Dict</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OkApiService</span>:</span></span><br><span class="line">    key = <span class="string">''</span></span><br><span class="line">    secret = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pre_hash</span><span class="params">(self, timestamp, method, request_path, params=None)</span>:</span></span><br><span class="line">        <span class="comment"># 根据字符串和参数创建预签名</span></span><br><span class="line">        query_string = <span class="string">''</span></span><br><span class="line">        <span class="keyword">if</span> method == <span class="string">'GET'</span> <span class="keyword">and</span> params:</span><br><span class="line">            query_string = <span class="string">'?'</span> + urllib.parse.urlencode(params).replace(<span class="string">"%2520"</span>, <span class="string">"%20"</span>)</span><br><span class="line">        <span class="keyword">if</span> method == <span class="string">'POST'</span> <span class="keyword">and</span> params:</span><br><span class="line">            query_string = json.dumps(params)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"<span class="subst">&#123;timestamp&#125;</span><span class="subst">&#123;method&#125;</span><span class="subst">&#123;request_path&#125;</span><span class="subst">&#123;query_string&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_signature</span><span class="params">(self, method, request_path, params=None)</span>:</span></span><br><span class="line">        <span class="comment"># 获取 ISO 8601 格式时间戳</span></span><br><span class="line">        timestamp = datetime.now(timezone.utc).isoformat()[:<span class="number">-9</span>] + <span class="string">'Z'</span></span><br><span class="line">        <span class="comment"># 生成签名</span></span><br><span class="line">        message = self.pre_hash(timestamp, method, request_path, params)</span><br><span class="line">        signature = hmac.new(bytes(self.secret, encoding=<span class="string">'utf8'</span>), bytes(message, encoding=<span class="string">'utf-8'</span>), digestmod=<span class="string">'sha256'</span>)</span><br><span class="line">        signature = base64.b64encode(signature.digest())</span><br><span class="line">        <span class="keyword">return</span> signature, timestamp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_market_list</span><span class="params">(self, token_info: Dict)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line"></span><br><span class="line">        url = <span class="string">f"https://www.okx.com/api/v5/mktplace/nft/markets/listings?chain=<span class="subst">&#123;token_info.get(<span class="string">'chain'</span>)&#125;</span>&amp;collectionAddress=<span class="subst">&#123;token_info.get(<span class="string">'collectionAddress'</span>)&#125;</span>&amp;limit=<span class="subst">&#123;<span class="number">100</span>&#125;</span>&amp;sort=price_asc"</span></span><br><span class="line"></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">"chain"</span>: token_info.get(<span class="string">'chain'</span>),</span><br><span class="line">            <span class="string">"collectionAddress"</span>: token_info.get(<span class="string">'collectionAddress'</span>),</span><br><span class="line">            <span class="string">"limit"</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="string">"sort"</span>: <span class="string">"price_asc"</span></span><br><span class="line">        &#125;</span><br><span class="line">        signature, timestamp = self.create_signature(<span class="string">"GET"</span>, <span class="string">"/api/v5/mktplace/nft/markets/listings"</span>, params)</span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">"Content-Type"</span>: <span class="string">'application/json'</span>,</span><br><span class="line">            <span class="string">'OK-ACCESS-KEY'</span>: self.key,</span><br><span class="line">            <span class="string">'OK-ACCESS-SIGN'</span>: signature,</span><br><span class="line">            <span class="string">'OK-ACCESS-TIMESTAMP'</span>: timestamp,</span><br><span class="line">            <span class="string">'OK-ACCESS-PASSPHRASE'</span>: <span class="string">''</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response = requests.request(<span class="string">"GET"</span>, url, headers=headers)</span><br><span class="line">        print(len(response.json().get(<span class="string">"data"</span>).get(<span class="string">"data"</span>)))</span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> response.json().get(<span class="string">"data"</span>).get(<span class="string">"data"</span>):</span><br><span class="line">            print(<span class="string">f"<span class="subst">&#123;d.get(<span class="string">'tokenId'</span>)&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">"chain"</span>: <span class="string">"Lumi%20Layer3"</span>,</span><br><span class="line">        <span class="string">"collectionAddress"</span>: <span class="string">"0x3fa10a9d43113687f2fd143fca7445d8ef8e334a"</span></span><br><span class="line">    &#125;</span><br><span class="line">    OkApiService().get_market_list(params)</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">"chain"</span>: <span class="string">"eth"</span>,</span><br><span class="line">        <span class="string">"collectionAddress"</span>: <span class="string">"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d"</span></span><br><span class="line">    &#125;</span><br><span class="line">    OkApiService().get_market_list(params)</span><br></pre></td></tr></table></figure><p>这里面有几个点要注意</p><ul><li><code>lumi</code> 的网络本来是<ul><li><code>Lumi Layer3</code>，中间有个空格，但是，空格可以用<code>%20</code>代替</li><li>但是 <code>%20</code> 会被 <code>urllib.parse.urlencode</code> 变成 <code>%2520</code>，所以，加了一个 <code>replace(&quot;%2520&quot;, &quot;%20&quot;)</code></li><li>这个地方可以再优化</li></ul></li><li>尽管 <code>OK</code> 平台的公开信息并不支持 <code>Lumi Layer3</code>，但是尝试后发现可以</li></ul><p><img src="/images/ok/1_1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;ok api&lt;/code&gt; 其实分为两种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;oklink&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2024/03/21/ok0/&quot;&gt;oklink&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;okapi&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;这篇文章主要说这个&lt;/li&gt;
&lt;li&gt;这里的 api 指的是平台 api，但是，平台 api 又分为两种&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.okx.com/docs-v5/zh/#public-data&quot;&gt;cex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.okx.com/zh-hans/web3/build/docs/home/welcome&quot;&gt;链上&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="项目经历" scheme="http://benpaodewoniu.github.io/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/"/>
    
      <category term="大型" scheme="http://benpaodewoniu.github.io/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/%E5%A4%A7%E5%9E%8B/"/>
    
      <category term="quantify" scheme="http://benpaodewoniu.github.io/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/%E5%A4%A7%E5%9E%8B/quantify/"/>
    
      <category term="gateway" scheme="http://benpaodewoniu.github.io/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/%E5%A4%A7%E5%9E%8B/quantify/gateway/"/>
    
      <category term="ok" scheme="http://benpaodewoniu.github.io/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/%E5%A4%A7%E5%9E%8B/quantify/gateway/ok/"/>
    
      <category term="okapi" scheme="http://benpaodewoniu.github.io/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86/%E5%A4%A7%E5%9E%8B/quantify/gateway/ok/okapi/"/>
    
    
      <category term="okapi" scheme="http://benpaodewoniu.github.io/tags/okapi/"/>
    
  </entry>
  
  <entry>
    <title>python | 多进程间的通信，复杂场景</title>
    <link href="http://benpaodewoniu.github.io/2024/06/18/python206/"/>
    <id>http://benpaodewoniu.github.io/2024/06/18/python206/</id>
    <published>2024-06-17T16:00:41.000Z</published>
    <updated>2024-06-17T16:58:10.470Z</updated>
    
    <content type="html"><![CDATA[<p>我们经常会有以下的场景需要处理</p><ul><li>一个进程接数据，另外一个进程怎么收数据</li><li>怎么让多个进程共用一个日志模块</li></ul><a id="more"></a><p>一个例子。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">import multiprocessing</span><br><span class="line">import multiprocessing as mp</span><br><span class="line">import time</span><br><span class="line"><span class="keyword">from</span> multiprocessing import Manager</span><br><span class="line"><span class="keyword">from</span> multiprocessing.managers import BaseManager</span><br><span class="line"><span class="keyword">from</span> multiprocessing.queues import Queue</span><br><span class="line"><span class="keyword">from</span> typing import Dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Logger:</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">"logger 初始化"</span>)</span><br><span class="line"></span><br><span class="line">    def <span class="builtin-name">info</span>(self, process, data):</span><br><span class="line">        <span class="builtin-name">print</span>(f<span class="string">"&#123;process&#125; 日志输出: &#123;data&#125;"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Engine:</span><br><span class="line"></span><br><span class="line">    def start(self):</span><br><span class="line">       <span class="built_in"> queue </span>= mp.Queue()</span><br><span class="line">        dict_memory = Manager().dict()</span><br><span class="line">        bm = BaseManager()</span><br><span class="line">        bm.register(<span class="string">"Logger"</span>, Logger)</span><br><span class="line">        bm.start()</span><br><span class="line">        logger = bm.Logger()</span><br><span class="line"></span><br><span class="line">        asserts = &#123;</span><br><span class="line">            <span class="string">"logger"</span>: logger,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        logger.<span class="builtin-name">info</span>(multiprocessing.current_process().name, <span class="string">"test"</span>)</span><br><span class="line"></span><br><span class="line">        p1 = mp.Process(<span class="attribute">target</span>=self.input, args=(queue, dict_memory, asserts), <span class="attribute">name</span>=<span class="string">"监控"</span>)</span><br><span class="line">        p2 = mp.Process(<span class="attribute">target</span>=self.output, args=(queue, dict_memory, asserts), <span class="attribute">name</span>=<span class="string">"web"</span>)</span><br><span class="line">        p3 = mp.Process(<span class="attribute">target</span>=self.active_start, args=(dict_memory, asserts), <span class="attribute">name</span>=<span class="string">"保活"</span>)</span><br><span class="line"></span><br><span class="line">        p1.start()</span><br><span class="line">        p2.start()</span><br><span class="line">        p3.start()</span><br><span class="line"></span><br><span class="line">        p1.join()</span><br><span class="line">        p2.join()</span><br><span class="line">        p3.join()</span><br><span class="line"></span><br><span class="line">    def input(self, queue: Queue, dict_memory: Dict, asserts: Dict):</span><br><span class="line">        logger = asserts.<span class="builtin-name">get</span>(<span class="string">"logger"</span>)</span><br><span class="line">        i = 0</span><br><span class="line">        <span class="keyword">while</span> 1:</span><br><span class="line">            queue.put(f<span class="string">"数据 &#123;i&#125;"</span>)</span><br><span class="line">            logger.<span class="builtin-name">info</span>(multiprocessing.current_process().name, f<span class="string">"队列入 &#123;i&#125;"</span>)</span><br><span class="line"></span><br><span class="line">            dict_memory[i] = i</span><br><span class="line">            logger.<span class="builtin-name">info</span>(multiprocessing.current_process().name, f<span class="string">"共用字典入 &#123;i&#125;"</span>)</span><br><span class="line"></span><br><span class="line">            time.sleep(3)</span><br><span class="line"></span><br><span class="line">            i += 1</span><br><span class="line"></span><br><span class="line">    def output(self, queue: Queue, dict_memory: Dict, asserts: Dict):</span><br><span class="line">        logger = asserts.<span class="builtin-name">get</span>(<span class="string">"logger"</span>)</span><br><span class="line">        <span class="keyword">while</span> 1:</span><br><span class="line">            data = queue.<span class="builtin-name">get</span>()</span><br><span class="line">            logger.<span class="builtin-name">info</span>(multiprocessing.current_process().name, f<span class="string">"队列出 &#123;data&#125;"</span>)</span><br><span class="line">            time.sleep(1)</span><br><span class="line"></span><br><span class="line">    def active_start(self, dict_memory: Dict, asserts: Dict):</span><br><span class="line">        logger = asserts.<span class="builtin-name">get</span>(<span class="string">"logger"</span>)</span><br><span class="line">        <span class="keyword">while</span> 1:</span><br><span class="line">            logger.<span class="builtin-name">info</span>(multiprocessing.current_process().name, f<span class="string">"字典长度为 &#123;len(dict_memory)&#125;"</span>)</span><br><span class="line">            time.sleep(4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    Engine().start()</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">logger 初始化</span><br><span class="line">MainProcess 日志输出: test</span><br><span class="line">监控 日志输出: 队列入 <span class="number">0</span></span><br><span class="line">web 日志输出: 队列出 数据 <span class="number">0</span></span><br><span class="line">监控 日志输出: 共用字典入 <span class="number">0</span></span><br><span class="line">保活 日志输出: 字典长度为 <span class="number">0</span></span><br><span class="line">监控 日志输出: 队列入 <span class="number">1</span></span><br><span class="line">web 日志输出: 队列出 数据 <span class="number">1</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们经常会有以下的场景需要处理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个进程接数据，另外一个进程怎么收数据&lt;/li&gt;
&lt;li&gt;怎么让多个进程共用一个日志模块&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="python" scheme="http://benpaodewoniu.github.io/categories/python/"/>
    
      <category term="进阶" scheme="http://benpaodewoniu.github.io/categories/python/%E8%BF%9B%E9%98%B6/"/>
    
      <category term="多进程 &amp; 多线程" scheme="http://benpaodewoniu.github.io/categories/python/%E8%BF%9B%E9%98%B6/%E5%A4%9A%E8%BF%9B%E7%A8%8B-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="多进程" scheme="http://benpaodewoniu.github.io/categories/python/%E8%BF%9B%E9%98%B6/%E5%A4%9A%E8%BF%9B%E7%A8%8B-%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="通信" scheme="http://benpaodewoniu.github.io/categories/python/%E8%BF%9B%E9%98%B6/%E5%A4%9A%E8%BF%9B%E7%A8%8B-%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E8%BF%9B%E7%A8%8B/%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="multiprocess" scheme="http://benpaodewoniu.github.io/tags/multiprocess/"/>
    
      <category term="多进程" scheme="http://benpaodewoniu.github.io/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>python | 进城池和多进程应该如何选择</title>
    <link href="http://benpaodewoniu.github.io/2024/06/18/python205/"/>
    <id>http://benpaodewoniu.github.io/2024/06/18/python205/</id>
    <published>2024-06-17T16:00:38.000Z</published>
    <updated>2024-06-17T17:00:30.366Z</updated>
    
    <content type="html"><![CDATA[<p>这里主要讨论进程。</p><a id="more"></a><p>其实很简单，进程池中的进程是使用过之后，将空闲进程放回池子中，等待下一次使用，减少了创建的开销。</p><p>多进程应该运行长时间的程序采用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里主要讨论进程。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://benpaodewoniu.github.io/categories/python/"/>
    
      <category term="进阶" scheme="http://benpaodewoniu.github.io/categories/python/%E8%BF%9B%E9%98%B6/"/>
    
      <category term="多进程 &amp; 多线程" scheme="http://benpaodewoniu.github.io/categories/python/%E8%BF%9B%E9%98%B6/%E5%A4%9A%E8%BF%9B%E7%A8%8B-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="多进程" scheme="http://benpaodewoniu.github.io/categories/python/%E8%BF%9B%E9%98%B6/%E5%A4%9A%E8%BF%9B%E7%A8%8B-%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="进程池" scheme="http://benpaodewoniu.github.io/categories/python/%E8%BF%9B%E9%98%B6/%E5%A4%9A%E8%BF%9B%E7%A8%8B-%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E6%B1%A0/"/>
    
      <category term="进阶" scheme="http://benpaodewoniu.github.io/categories/python/%E8%BF%9B%E9%98%B6/%E5%A4%9A%E8%BF%9B%E7%A8%8B-%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E6%B1%A0/%E8%BF%9B%E9%98%B6/"/>
    
      <category term="进阶" scheme="http://benpaodewoniu.github.io/categories/python/%E8%BF%9B%E9%98%B6/%E5%A4%9A%E8%BF%9B%E7%A8%8B-%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E8%BF%9B%E7%A8%8B/%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="multiprocess" scheme="http://benpaodewoniu.github.io/tags/multiprocess/"/>
    
      <category term="多进程" scheme="http://benpaodewoniu.github.io/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>nanon | nanon</title>
    <link href="http://benpaodewoniu.github.io/2024/06/13/nanon0/"/>
    <id>http://benpaodewoniu.github.io/2024/06/13/nanon0/</id>
    <published>2024-06-13T14:52:07.000Z</published>
    <updated>2024-06-17T17:03:03.458Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">密码等级 0 ！！！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="fa24ac124b6b3b40b5beb9f11c0c1035687199f252426b406deba9ae1aa7e8b3">41b44efef159e4bb68479506e1793802e828c2a1dfa34ed2f774bba7436fa63919fbc5bd99088ad42ce18d6aee1e94a9e9006f860bee9e84d344f1d3ff89ffd40a528d13b2d32a43b72cb41b52dea46d952a50b6eefd1495e7774429b5e2a8026fb6b94256113431b47a7c3ade9684035057a8df65865748f1a6a51845e28b862c07dbf977e8d6854b1af122da153ce3335bf43c64e1d2e025b2515b4810d2eba4eb38b6ee4cdb738a74908d845092772bc733d1c7b8353e123318877bffff6097bc3a84ae41d224c520c914061cae1d103bc2ca4da1af29570cbba0d6305870cb0f01a3865d197524bf320f1f2be6850879be936dd453f6e1c6d4a1af9540e872196f60124e6fbd5525a55f206b303774fd7960b989529056f16134683d9f8370ea2a8724de95439d650b67d015756c0c31a3ff5428f4ee8b318a5884ee145e65c5ac6c79e0331c57ea17bed0a493d6185d71eb1fabc41d4301a61feb3357abffe9254b5285ae2b4f805880832fd7220b776d4f74d6f3653f2ab9513cbb24c21a45d78710af203b5d007029efb06f2e7c8c0f3b8d562e0974c6c8c754922bb157d468c8b6819c7f1c3aa898d6c113d4</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      密码等级 0
    
    </summary>
    
      <category term="区块链" scheme="http://benpaodewoniu.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="dapp" scheme="http://benpaodewoniu.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/dapp/"/>
    
      <category term="2b" scheme="http://benpaodewoniu.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/dapp/2b/"/>
    
    
      <category term="2b" scheme="http://benpaodewoniu.github.io/tags/2b/"/>
    
  </entry>
  
</feed>
